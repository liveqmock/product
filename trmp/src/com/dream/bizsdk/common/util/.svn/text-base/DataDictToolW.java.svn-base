/*
 * DataDictToolW.java
 *
 * Created on 2003��4��1��, ����2:26
 */

package com.dream.bizsdk.common.util;

import com.dream.bizsdk.common.database.dblink.*;
import com.dream.bizsdk.common.database.datadict.*;

import java.util.Vector;
import java.awt.*;
import java.sql.Connection;
import javax.swing.*;
import java.awt.event.*;


/**
 * @author chuguanghua
 */
public class DataDictToolW extends javax.swing.JFrame {

    static {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
        } catch (ClassNotFoundException cnfe) {
            System.out.println("warn: sqlserver jdbc driver not found.");
        }
        /*try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
        } catch (ClassNotFoundException cnfe) {
            System.out.println("warn: oracle jdbc driver not found.");
        }*/
    }

    String[] values = {"please connect first", };

    /**
     * Creates new form DataDictToolW
     */
    public DataDictToolW() {
        //values = getTablesInDB();
        initComponents();
        pwdUserPassword.grabFocus();
        try {
            jbInit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblUser = new javax.swing.JLabel();
        txtDBUser = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtDBURL = new javax.swing.JTextField();
        lblDBURL = new javax.swing.JLabel();
        pwdUserPassword = new javax.swing.JPasswordField();
        btnUpdateDict = new javax.swing.JButton();
        btnBuildDict = new javax.swing.JButton();
        lblNote = new javax.swing.JTextPane();
        lblTabls = new javax.swing.JLabel();
        btnConnect = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        spPane = new javax.swing.JScrollPane();
        liTablesInDB = new JList(values);

        getContentPane().setLayout(null);

        setTitle("\u6570\u636e\u5b57\u5178\u7ef4\u62a4");
        setName("mainWindow");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        lblUser.setText("User");
        getContentPane().add(lblUser);

        txtDBUser.setText("core");
        getContentPane().add(txtDBUser);

        lblPassword.setText("Password");
        getContentPane().add(lblPassword);

        txtDBURL.setText("jdbc:oracle:thin:@192.168.1.221:1521:orcltest");
        getContentPane().add(txtDBURL);

        lblDBURL.setText("Database URL");
        getContentPane().add(lblDBURL);

        getContentPane().add(pwdUserPassword);

        btnUpdateDict.setText("\u66f4\u65b0");
        btnUpdateDict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDictActionPerformed(evt);
            }
        });

        getContentPane().add(btnUpdateDict);

        btnBuildDict.setText("\u91cd\u505a");
        btnBuildDict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuildDictActionPerformed(evt);
            }
        });

        getContentPane().add(btnBuildDict);

        getContentPane().add(lblNote);

        lblTabls.setForeground(new java.awt.Color(0, 0, 204));
        lblTabls.setText("Tables/views In Database:");
        getContentPane().add(lblTabls);

        btnConnect.setText("\u8fde\u63a5");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        getContentPane().add(btnConnect);

        btnClear.setText("\u6e05\u7a7a");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        getContentPane().add(btnClear);

        liTablesInDB.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        liTablesInDB.setForeground(new java.awt.Color(0, 51, 204));
        spPane.setViewportView(liTablesInDB);

        getContentPane().add(spPane);
        this.setBounds(50, 50, 450, 380);
        //pack();
    }//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // Add your handling code here:
        if (clearDict()) {
            lblNote.setText("Dictionary has been cleared!");
            lblNote.setForeground(Color.blue);
        } else {
            lblNote.setText("Can't clear the dictionary, please ensure there is a valid connection to the database!");
            lblNote.setForeground(Color.red);
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        String[] tables = getTablesInDB();
        if (tables != null) {
            this.liTablesInDB.setListData(tables);
            lblNote.setText("Connected to the DataBase!");
            lblNote.setForeground(Color.blue);
        } else {
            lblNote.setText("Can't connect to the database,or there is not dictionary tables!");
            lblNote.setForeground(Color.red);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnBuildDictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuildDictActionPerformed
        Vector tables = getSelectedTables();
        makeDict(false, tables);
    }//GEN-LAST:event_btnBuildDictActionPerformed

    private void btnUpdateDictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDictActionPerformed
        Vector tables = getSelectedTables();
        makeDict(true, tables);
    }//GEN-LAST:event_btnUpdateDictActionPerformed

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void makeDict(boolean isUpdate, Vector tables) {
        try {
            lblNote.setText("building the dictionary...");
            lblNote.setForeground(Color.yellow);
            DBLinksPool pool = new DBLinksPool(this.txtDBURL.getText(),
                    this.txtDBUser.getText(),
                    new String(this.pwdUserPassword.getPassword()), 1);
            Connection conn = (Connection) pool.getPoolItem();
            DataDictTool dict = new DataDictTool();
            boolean succ = false;
            if (isUpdate) {
                if (tables != null) {
                    succ = dict.updateDict(tables, conn);
                } else {
                    succ = dict.updateDict(conn);
                }
            } else {
                if (tables != null) {
                    succ = dict.createDict(tables, conn);
                } else {
                    succ = dict.createDict(conn);
                }
            }
            if (succ) {
                lblNote.setText("Succeed to make the DataItem Dictionary!");
                lblNote.setForeground(Color.blue);
            } else {
                lblNote.setText("Failed to build the dictionary!!!");
                lblNote.setForeground(Color.red);
            }
        } catch (Exception e) {
            e.printStackTrace();
            lblNote.setText(e.getMessage());
            lblNote.setForeground(Color.red);
        }
    }

    private String[] getTablesInDB() {
        try {
            String pwd = new String(this.pwdUserPassword.getPassword());
            DBLinksPool pool = new DBLinksPool(this.txtDBURL.getText(),
                    this.txtDBUser.getText(),
                    pwd, 1);
            Connection conn = (Connection) pool.getPoolItem();
            DataDictTool dict = new DataDictTool();
            Vector tables = dict.queryTablesInDB(conn);
            return (String[]) tables.toArray(new String[0]);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }

    private Vector getSelectedTables() {
        int i = 0;
        Vector tables = new Vector();
        Object[] array = liTablesInDB.getSelectedValues();
        if (array != null) {
            while (i < array.length) {
                tables.add(array[i]);
                i++;
            }
        }
        if (tables.size() > 0) {
            return tables;
        } else {
            return null;
        }
    }

    private boolean clearDict() {
        try {
            DBLinksPool pool = new DBLinksPool(this.txtDBURL.getText(),
                    this.txtDBUser.getText(),
                    new String(this.pwdUserPassword.getPassword()), 1);
            Connection conn = (Connection) pool.getPoolItem();
            DataDictTool dict = new DataDictTool();
            dict.clearDict(conn);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new DataDictToolW().show();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    JPasswordField pwdUserPassword = new JPasswordField();
    JLabel lblUser = new JLabel();
    JTextField txtDBUser = new JTextField();
    JLabel lblPassword = new JLabel();
    JLabel lblDBURL = new JLabel();
    JTextField txtDBURL = new JTextField();
    JButton btnClear = new JButton();
    JButton btnBuildDict = new JButton();
    JButton btnUpdateDict = new JButton();
    JButton btnConnect = new JButton();
    JScrollPane spPane = new JScrollPane();
    JLabel lblTabls = new JLabel();
    JList liTablesInDB = new JList();
    JTextPane lblNote = new JTextPane();
    JLabel lblDriver = new JLabel();
    JTextField txtDriver = new JTextField();

    private void jbInit() throws Exception {
        this.getContentPane().setLayout(null);
        pwdUserPassword.setBounds(new Rectangle(313, 32, 104, 22));
        lblUser.setText("User");
        lblUser.setBounds(new Rectangle(17, 31, 44, 25));
        txtDBUser.setBounds(new Rectangle(89, 34, 103, 22));
        lblPassword.setText("Password");
        lblPassword.setBounds(new Rectangle(228, 30, 64, 26));
        lblDBURL.setText("DBURL");
        lblDBURL.setBounds(new Rectangle(15, 64, 74, 25));
        txtDBURL.setBounds(new Rectangle(89, 65, 326, 22));
        btnClear.setBounds(new Rectangle(328, 174, 87, 21));
        btnClear.setText("Clear");
        btnBuildDict.setBounds(new Rectangle(328, 204, 88, 20));
        btnBuildDict.setText("Build");
        btnUpdateDict.setBounds(new Rectangle(328, 231, 87, 20));
        btnUpdateDict.setText("Update");
        btnConnect.setBounds(new Rectangle(327, 122, 88, 21));
        btnConnect.setText("Connect");
    btnConnect.addActionListener(new DataDictToolW_btnConnect_actionAdapter(this));
        spPane.setBounds(new Rectangle(13, 119, 305, 235));
        lblTabls.setText("Tables/Views");
        lblTabls.setBounds(new Rectangle(7, 107, 123, 12));
        lblNote.setBackground(SystemColor.inactiveCaptionText);
        lblNote.setBorder(BorderFactory.createLineBorder(Color.black));
        lblNote.setDisabledTextColor(Color.blue);
        lblNote.setEditable(false);
        lblNote.setBounds(new Rectangle(331, 260, 88, 86));
        this.getContentPane().add(txtDBUser, null);
        this.getContentPane().add(spPane, null);
        spPane.getViewport().add(liTablesInDB, null);
        this.getContentPane().add(pwdUserPassword, null);
        this.getContentPane().add(txtDBURL, null);
        this.getContentPane().add(lblPassword, null);
        this.getContentPane().add(lblTabls, null);
        this.getContentPane().add(lblUser, null);
        this.getContentPane().add(lblDBURL, null);
        this.getContentPane().add(btnConnect, null);
        this.getContentPane().add(btnBuildDict, null);
        this.getContentPane().add(btnClear, null);
        this.getContentPane().add(btnUpdateDict, null);
        this.getContentPane().add(lblNote, null);
    }

  void btnConnect_actionPerformed(ActionEvent e) {

  }
}

class DataDictToolW_btnConnect_actionAdapter implements java.awt.event.ActionListener {
  DataDictToolW adaptee;

  DataDictToolW_btnConnect_actionAdapter(DataDictToolW adaptee) {
    this.adaptee = adaptee;
  }
  public void actionPerformed(ActionEvent e) {
    adaptee.btnConnect_actionPerformed(e);
  }
}
