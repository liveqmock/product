package com.cots.bean;

import com.cots.util.XMLDocument;
import com.cots.util.FileUtil;
import com.cots.util.Cache;
import com.cots.util.XMLFile;
import com.cots.bean.display.AbstractDisplay;
import com.cots.bean.display.Display;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import java.io.*;
import java.util.HashMap;
import java.util.List;

import org.xml.sax.SAXException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.apache.log4j.Logger;

/**
 * User: chugh
 * Date: 2004-10-15
 * Time: 23:02:38
 */
public class BeanFactory implements Cache{

    private String configRoot;
    private HashMap beansByName = new HashMap();
    private HashMap beansByClass = new HashMap();

    private Logger log = Logger.getLogger(BeanFactory.class);

    public BeanFactory(){

    }

    /**
     * get a bean by name from this factory;
     *
     * @param name the name of the bean;
     * @return the Bean object, null if the bean does not exist;
     */
    public Bean getByName(String name){
        return (Bean)beansByName.get(name);
    }

    /**
     * get a bean by the bean's Class obejct. if there is no Bean matching this
     * Class object, then a new Bean will be created based on this Class object,
     * and the newly created Bean object will be add into the Beans cache;
     *
     * @param clz a Class object that may be a Bean object;
     * @return the Bean object,should not be null;
     */
    public Bean getByClass(Class clz){
        Bean bean = null;
        bean = (Bean)beansByClass.get(clz);
        if(bean == null){
            synchronized(this){
                //check if the bean has been generated by previous thread;
                bean = (Bean)beansByClass.get(clz);
                if(bean == null){
                    bean = BeanParser.parseClassToBean(clz);
                    bean.setFactory(this);
                    beansByName.put(bean.getName(),bean);
                }
            }
        }
        return bean;
    }

    /**
     *
     * @param rootPath
     */
    public boolean init(String rootPath){
        configRoot = rootPath;
        char endingChar = configRoot.charAt(configRoot.length()-1);
        if(endingChar != '\\' && endingChar != '/'){
            configRoot +='/';
        }
        return refresh();
    }

    /**
     * refresh this cache object;
     *
     * @return true of all the configuration files have be read;
     */
    public synchronized boolean refresh(){
        boolean succ = true;
        File[] files = FileUtil.filerFiles(configRoot,".xml");
        FileInputStream[] is= new FileInputStream[files.length];
        for(int i=0;i<files.length;i++){
            try{
                is[i] = new FileInputStream(files[i]);
            }catch(FileNotFoundException e){
                log.error("bean definition file not found",e);
                succ = false;
            }
        }
        try{
            init(is);
        }catch(Exception e){
            log.error("parse bean definition file error",e);
            succ = false;
        }
        return succ;
    }

    /**
     * get the names of all the bean configuration files.
     *
     * @return the file names array, never null;
     */
    public String[] getConfigFiles(){
        File[] files = FileUtil.filerFiles(configRoot,".xml");
        String[] names = new String[files.length];
        for(int i=0;i<files.length;i++){
            names[i] = files[i].getName();
        }
        return names;
    }

    /**
     * get the names of all the beans in a configuration files.
     *
     * @param fileName the name of the configuration file;
     * @return the bean names array, if the file doest not exist, or is not a valid
     * xml file, then null is returned, otherwise never null;
     */
    public String[] getBeanNamesInConfFile(String fileName){
        try{
            File confFile = new File(configRoot+fileName);
            XMLFile xml = new XMLFile(confFile);
            NodeList nl = xml.selectNodeList("/managed-beans/bean");
            int count = 0;
            if(nl!=null){
                count = nl.getLength();
            }
            String[] names = new String[count];
            for(int i=0;i<count;i++){
                names[i] = ((Element)(nl.item(i))).getAttribute("name");
            }
            return names;
        }catch(Exception e){
            e.printStackTrace();
            return null;
        }
    }

    /**
     * get the names of all the beans.
     * 
     * @return
     */
    public String[] getBeanNames(){
        return (String[])beansByName.keySet().toArray(new String[beansByName.size()]);
    }

    /**
     *
     * @param iss
     * @throws IOException
     * @throws ParserConfigurationException
     * @throws SAXException
     */
    protected  void init(InputStream[] iss)
            throws IOException, ParserConfigurationException, SAXException {
        Bean bean = null;

        for(int k=0;k<iss.length;k++){
            Document doc = XMLDocument.fromInputStream(iss[k]);
            XMLDocument xml = new XMLDocument(doc);
            NodeList nl = xml.selectNodeList("/managed-beans/bean");
            int count = nl.getLength();
            for(int i=0;i<count;i++){
                Element e = (Element)nl.item(i);
                String name = e.getAttribute("name");
                String className = e.getAttribute("class");

                try{
                    bean = new Bean(name,className,this);
                }catch(ClassNotFoundException ex){
                    log.error("Can't find bean class:"+className);
                    continue;
                }

                String table = e.getAttribute("table");
                if(table.length()<1){
                    table = name;
                }
                bean.setTableName(table);

                String  includeParent= e.getAttribute("includeParent");
                if("true".equalsIgnoreCase(includeParent)){
                    bean.setSaveParent(true);
                }

                NodeList attrs = xml.selectNodeList(e,"property");
                if(attrs!=null){
                    int countAttrs = attrs.getLength();
                    for(int j=0;j<countAttrs;j++){
                        Element attrNode = (Element)attrs.item(j);
                        String aName = attrNode.getAttribute("name");
                        String aType = attrNode.getAttribute("type");
                        String aKey = attrNode.getAttribute("key");
                        String aCol = attrNode.getAttribute("column");
                        String aFormat = attrNode.getAttribute("format");
                        String aPers = attrNode.getAttribute("persitent"); //not managed
                        String aRo = attrNode.getAttribute("readonly");     //not managed

                        String aNullable = attrNode.getAttribute("nullable");     //not managed

                        String getMethod = attrNode.getAttribute("getMethod");
                        String setMethod = attrNode.getAttribute("setMethod");


//                        if(log.isDebugEnabled()){
//                            if(!PrimitiveType.isPrimitive(aType)){
//                                if(log.isEnabledFor(Priority.ERROR)){
//                                    log.error("Unknown type\" "+aType+"\" for attribute \""+aName
//                                            +"\" of the Bean\""+name+"\"");
//                                }
//                                continue;
//                            }
//                        }
                        try{
                            BeanProperty bp = new BeanProperty(aName,aType);
                            if(getMethod.length()>0){
                                bp.getMethodName = getMethod;
                            }

                            if(setMethod.length()>0){
                                bp.setMethodName = setMethod;
                            }
                            //default key to false;
                            if(aKey.equals("true")){
                                bp.setKey(true);
                            }
                            if(aPers.equals("false")){
                                bp.setPersitent(false);
                            }

                            if("false".equalsIgnoreCase(aNullable)){
                                bp.setNullable(false);
                            }else{
                                bp.setNullable(true);
                            }
                            
                            if(aCol.length()<1){
                                bp.setColumnName(aName);
                            }else{
                                bp.setColumnName(aCol);
                            }

                            if("true".equals(aRo)){
                                bp.setReadOnly(true);
                            }

                            if(aFormat!=null && aFormat.length()>0){
                                bp.setFormat(aFormat);
                            }

                            Element displayEle = (Element)xml.selectSingleNode(attrNode,"display");
//                            if(displayEle!=null){
                            Display display = AbstractDisplay.getInstance(displayEle);
                            bp.setDisplay(display);

//                            }
                            NodeList options = (NodeList)xml.selectNodeList(attrNode,"value/option");
                            if(options!=null && options.getLength()>0){
                                for(int l=0;l<options.getLength();l++){
                                    Element ele = (Element)options.item(l);
                                    String value = ele.getAttribute("value");
                                    String label = ele.getAttribute("label");
                                    if(value!=null && value.length()>0 && label!=null && label.length()>0){
                                        BeanPropertyValue bpv = new BeanPropertyValue(value,label);
                                        bp.addValue(bpv);
                                    }
                                }
                            }else{
                                Element fk = (Element)xml.selectSingleNode(attrNode,"value/fk");
                                if(fk!=null){
                                    String fkDAO = fk.getAttribute("dao");
                                    String fkTable = fk.getAttribute("table");
                                    String fkValueCol = fk.getAttribute("valueCol");
                                    String fkLabelCol = fk.getAttribute("labelCol");
                                    bp.setFkDAOName(fkDAO);
                                    bp.setFkTable(fkTable);
                                    bp.setFkName(fkValueCol);
                                    bp.setFkLabel(fkLabelCol);
                                }
                            }
                            bean.addProperty(bp);
                        }catch(NoSuchPropertyException ex){
                            log.error("No such property:"+aName+" of type: "+aType+" in bean:"+className);
                            ex.printStackTrace();
                            continue;
                        }
                    }
                }
                if(log.isInfoEnabled()){
                    log.info("Managed bean: "+name+" of class: "+className+" creatd");
                }
                beansByName.put(name,bean);
                beansByClass.put(bean.getBeanClass(),bean);
            }
        }
    }

    /**
     * add a bean to this factory, and save this bean to a configuration file at the same time.
     *
     * @param bean the bean to be saved;
     * @param file the name of the configuration file which will contain the bean's definition;
     * @throws IOException
     * @throws ParserConfigurationException
     * @throws SAXException
     * @throws TransformerException
     */
    public void addBean(Bean bean,String file)
            throws IOException, ParserConfigurationException, SAXException, TransformerException {
        beansByName.put(bean.getName(),bean);
        beansByClass.put(bean.getBeanClass(),bean);
        File confFile = new File(configRoot+file);
        XMLFile xml = new XMLFile(confFile);
        saveBean2XML(bean,xml);
        xml.close();
    }

    /**
     * save a bean's definition to a xml document;
     *
     * @param bean the bean to be saved;
     * @param xml the xml document which will contains the defintion;
     */
    private void saveBean2XML(Bean bean ,XMLFile xml){
        NodeList nl = xml.selectNodeList("/managed-beans/bean[@name=\""+bean.getName()+"\"]");
        int count = 0;
        if(nl!=null && (count=nl.getLength())>=1){
            for(int i=0;i<count;i++){
                Node n = nl.item(i);
                n.getParentNode().removeChild(n);
            }
        }

        String name = bean.getName();
        String className = bean.getClassName();
        String tableName = bean.getTableName();

        //basic info;
        Element doc = xml.getDocument().getDocumentElement();
        Element beanEle = xml.appendChild(doc,"bean");
        beanEle.setAttribute("name",name);
        beanEle.setAttribute("class",className);
        if(tableName!=null){
            beanEle.setAttribute("table",tableName);
        }

        //properties:
        List props = bean.getProperties();
        count = props.size();
        String value;
        for(int i=0;i<count;i++){
            BeanProperty bp = (BeanProperty)props.get(i);
            Element propEle = xml.appendChild(beanEle,"property");
            propEle.setAttribute("name",bp.getName());
            propEle.setAttribute("type",bp.getType());
            value = bp.getColumnName();
            if(value!=null){
                propEle.setAttribute("column",value);
            }
            if(bp.isKey()){
                propEle.setAttribute("key","true");
            }
            value = bp.getGetMethodName();
            if(value!=null){
                propEle.setAttribute("getMethodName",value);
            }
            value = bp.getSetMethodName();
            if(value!=null){
                propEle.setAttribute("setMethodName",value);
            }
        }
    }
}